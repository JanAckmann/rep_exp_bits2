! Copyright 2015 Andrew Dawson, Peter Dueben
!
! Licensed under the Apache License, Version 2.0 (the "License");
! you may not use this file except in compliance with the License.
! You may obtain a copy of the License at
!
!     http://www.apache.org/licenses/LICENSE-2.0
!
! Unless required by applicable law or agreed to in writing, software
! distributed under the License is distributed on an "AS IS" BASIS,
! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
! See the License for the specific language governing permissions and
! limitations under the License.

MODULE test_assignment_from_builtin
! Tests for assigning `rpe_type` instances frok built-in Fortran types.
!
    USE pfunit_mod
    USE suite_common, ONLY : utest64_t, utest64, utest32, utest32_64, utest32_t
    USE rp_emulator
    IMPLICIT NONE

CONTAINS

    @TEST
    SUBROUTINE test_assign_rpe_var_real_exact ()
        TYPE(rpe_var)            :: assignee
        REAL(KIND=RPE_REAL_KIND) :: value_holder

        value_holder = utest32_64
        assignee%sbits = 23
        assignee = value_holder
        @ASSERTEQUAL(value_holder, assignee%val)

    END SUBROUTINE test_assign_rpe_var_real_exact

    @TEST
    SUBROUTINE test_assign_rpe_var_real_truncated ()
        TYPE(rpe_var)            :: assignee
        REAL(KIND=RPE_REAL_KIND) :: value_holder
    
        value_holder = utest64
        assignee%sbits = 8
        assignee = value_holder
        @ASSERTEQUAL(utest64_t(8), assignee%val)
    
    END SUBROUTINE test_assign_rpe_var_real_truncated
    
    @TEST
    SUBROUTINE test_assign_rpe_var_alternate_exact ()
        TYPE(rpe_var)                 :: assignee
        REAL(KIND=RPE_ALTERNATE_KIND) :: value_holder

        value_holder = utest32
        assignee%sbits = 23
        assignee = value_holder
        @ASSERTEQUAL(value_holder, assignee%val)

    END SUBROUTINE test_assign_rpe_var_alternate_exact

    @TEST
    SUBROUTINE test_assign_rpe_var_alternate_truncated ()
        TYPE(rpe_var)                 :: assignee
        REAL(KIND=RPE_ALTERNATE_KIND) :: value_holder
    
        value_holder = utest32
        assignee%sbits = 8
        assignee = value_holder
        @ASSERTEQUAL(utest32_t(8), assignee%val)
    
    END SUBROUTINE test_assign_rpe_var_alternate_truncated
    
    @TEST
    SUBROUTINE test_assign_rpe_var_integer_exact ()
        TYPE(rpe_var) :: assignee
        INTEGER       :: value_holder

        value_holder = 1024
        assignee = value_holder
        @ASSERTEQUAL(REAL(value_holder, RPE_REAL_KIND), assignee%val)

    END SUBROUTINE test_assign_rpe_var_integer_exact

    @TEST
    SUBROUTINE test_assign_rpe_var_integer_truncated ()
        TYPE(rpe_var) :: assignee
        INTEGER       :: value_holder

        value_holder = 10241024
        assignee%sbits = 8
        assignee = value_holder
        @ASSERTEQUAL(REAL(10256384, RPE_REAL_KIND), assignee%val)

    END SUBROUTINE test_assign_rpe_var_integer_truncated

    @TEST
    SUBROUTINE test_assign_rpe_var_long_exact ()
        TYPE(rpe_var)   :: assignee
        INTEGER(KIND=8) :: value_holder

        value_holder = 1024
        assignee = value_holder
        @ASSERTEQUAL(REAL(value_holder, RPE_REAL_KIND), assignee%val)

    END SUBROUTINE test_assign_rpe_var_long_exact

    @TEST
    SUBROUTINE test_assign_rpe_var_long_truncated ()
        TYPE(rpe_var)   :: assignee
        INTEGER(KIND=8) :: value_holder

        value_holder = 10241024
        assignee%sbits = 8
        assignee = value_holder
        @ASSERTEQUAL(REAL(10256384, RPE_REAL_KIND), assignee%val)

    END SUBROUTINE test_assign_rpe_var_long_truncated

END MODULE test_assignment_from_builtin
